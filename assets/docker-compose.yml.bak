version: '3.4'


networks: 
  kafka_net:
    name: kafka_net

services:
  inventoryconsumer:
    image: ${DOCKER_REGISTRY-}inventoryconsumer
    container_name: InventoryConsumer
    build:
      context: .
      dockerfile: InventoryConsumer/Dockerfile
    depends_on: 
      - kafka
    networks: 
      - kafka_net
    environment:
      - ASPNETCORE_ENVIRONMENT=Development
      - ASPNETCORE_URLS=https://+:443;http://+:80
      - Kafka_BootstrapServers=kafka:29092
    ports:
     - ${EXPOSE_HTTP_CONTAINER_PORT1}:80
     - ${EXPOSE_HTTPS_CONTAINER_PORT1}:443


  inventoryproducer:
    image: ${DOCKER_REGISTRY-}inventoryproducer
    container_name: InventoryProducer
    build:
      context: .
      dockerfile: InventoryProducer/Dockerfile
    depends_on: 
      - kafka
    networks: 
      - kafka_net
    environment:
      - ASPNETCORE_ENVIRONMENT=Development
      - ASPNETCORE_URLS=https://+:443;http://+:80
      - Kafka_BootstrapServers=kafka:29092
    ports:
     - ${EXPOSE_HTTP_CONTAINER_PORT2}:80
     - ${EXPOSE_HTTPS_CONTAINER_PORT2}:443

  zookeeper:
    image: confluentinc/cp-zookeeper:7.5.0
    container_name: Zookeeper
    networks: 
      - kafka_net
    ports:
      - "2181:2181"
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000


  # reachable on 9092 from the host and on 29092 from inside docker compose
  kafka:
    image: confluentinc/cp-kafka:7.5.0
    hostname: kafka
    container_name: Kafka
    networks: 
      - kafka_net
    depends_on:
      - zookeeper
    ports:
      - '9092:9092'
      - "9997:9997"
    expose:
      - '29092'
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_MIN_INSYNC_REPLICAS: '1'
      KAFKA_CONFLUENT_BALANCER_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0
      KAFKA_CONFLUENT_LICENSE_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_JMX_PORT: 9997
      KAFKA_JMX_HOSTNAME: kafka
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:29092,PLAINTEXT_HOST://localhost:9092


  kafka-ui:
    image: provectuslabs/kafka-ui:latest
    container_name: KafkaUI
    networks: 
      - kafka_net
    ports:
      - 8082:8080
    restart: always
    environment:
      DYNAMIC_CONFIG_ENABLED: true
      KAFKA_CLUSTERS_0_NAME: Local Cluster
      KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS: kafka:29092
      KAFKA_CLUSTERS_0_METRICS_PORT: 9997

      KAFKA_CLUSTERS_0_SCHEMAREGISTRY: http://schemaregistry:8085
      KAFKA_CLUSTERS_0_KSQLDBSERVER: http://ksqldb:8088

  schemaregistry:
    image: confluentinc/cp-schema-registry:7.5.0
    container_name: SchemaRegistry
    networks: 
      - kafka_net
    ports:
      - 8085:8085
    depends_on:
      - kafka
    environment:
      SCHEMA_REGISTRY_KAFKASTORE_BOOTSTRAP_SERVERS: PLAINTEXT://kafka:29092
      SCHEMA_REGISTRY_KAFKASTORE_SECURITY_PROTOCOL: PLAINTEXT
      SCHEMA_REGISTRY_HOST_NAME: schemaregistry
      SCHEMA_REGISTRY_LISTENERS: http://schemaregistry:8085

      SCHEMA_REGISTRY_SCHEMA_REGISTRY_INTER_INSTANCE_PROTOCOL: "http"
      SCHEMA_REGISTRY_LOG4J_ROOT_LOGLEVEL: INFO
      SCHEMA_REGISTRY_KAFKASTORE_TOPIC: _schemas

  
  # kafka-connect:
  #   image: confluentinc/cp-kafka-connect:7.5.0
  #   container_name: KafkaConnect
  #   networks: 
  #     - kafka_net
  #   ports:
  #     - 8083:8083
  #   environment:
  #     CONNECT_BOOTSTRAP_SERVERS: kafka:29092
  #     CONNECT_GROUP_ID: compose-connect-group
  #     CONNECT_CONFIG_STORAGE_TOPIC: _connect_configs
  #     CONNECT_CONFIG_STORAGE_REPLICATION_FACTOR: 1
  #     CONNECT_OFFSET_STORAGE_TOPIC: _connect_offset
  #     CONNECT_OFFSET_STORAGE_REPLICATION_FACTOR: 1
  #     CONNECT_STATUS_STORAGE_TOPIC: _connect_status
  #     CONNECT_STATUS_STORAGE_REPLICATION_FACTOR: 1
  #     CONNECT_KEY_CONVERTER: org.apache.kafka.connect.storage.StringConverter
  #     CONNECT_KEY_CONVERTER_SCHEMA_REGISTRY_URL: http://schemaregistry:8085
  #     CONNECT_VALUE_CONVERTER: org.apache.kafka.connect.storage.StringConverter
  #     CONNECT_VALUE_CONVERTER_SCHEMA_REGISTRY_URL: http://schemaregistry:8085
  #     CONNECT_INTERNAL_KEY_CONVERTER: org.apache.kafka.connect.json.JsonConverter
  #     CONNECT_INTERNAL_VALUE_CONVERTER: org.apache.kafka.connect.json.JsonConverter
  #     CONNECT_REST_ADVERTISED_HOST_NAME: kafka-connect0
  #     CONNECT_PLUGIN_PATH: "/usr/share/java,/usr/share/confluent-hub-components"     

  ksqldb-server:
    image: confluentinc/ksqldb-server:latest
    hostname: ksqldb-server
    container_name: KSQLDB-Server
    networks: 
      - kafka_net
    depends_on:
      - kafka
    ports:
      - 8088:8088
    environment:
      KSQL_CUB_KAFKA_TIMEOUT: 120
      KSQL_LISTENERS: http://0.0.0.0:8088
      KSQL_KSQL_LOGGING_PROCESSING_STREAM_AUTO_CREATE: "true"
      KSQL_KSQL_LOGGING_PROCESSING_TOPIC_AUTO_CREATE: "true"
      KSQL_KSQL_CONNECT_URL: http://kafka-connect0:8083
      KSQL_KSQL_SCHEMA_REGISTRY_URL: http://schemaregistry0:8085
      KSQL_KSQL_SERVICE_ID: my_ksql_1
      KSQL_KSQL_HIDDEN_TOPICS: '^_.*'
      KSQL_CACHE_MAX_BYTES_BUFFERING: 0
      KSQL_BOOTSTRAP_SERVERS: kafka:29092

  ksqldb-cli:
    image: confluentinc/ksqldb-cli:latest
    container_name: KSQLDB-CLI
    networks: 
      - kafka_net
    depends_on:
      - kafka
      - ksqldb-server
    entrypoint: /bin/sh
    tty: true


  init-kafka:
    image: confluentinc/cp-kafka:7.5.0
    container_name: KafkaInit
    networks: 
      - kafka_net
    depends_on:
      - kafka
    entrypoint: [ '/bin/sh', '-c' ]
    command: |
      "
      # blocks until kafka is reachable
      kafka-topics --bootstrap-server kafka:29092 --list

      echo -e 'Creating kafka topics'
      kafka-topics --bootstrap-server kafka:29092 --create --if-not-exists --topic ${TOPIC1} --replication-factor 1 --partitions 1
      kafka-topics --bootstrap-server kafka:29092 --create --if-not-exists --topic ${TOPIC2} --replication-factor 1 --partitions 1

      echo -e 'Successfully created the following topics:'
      kafka-topics --bootstrap-server kafka:29092 --list
      "

